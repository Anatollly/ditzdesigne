body,
div,
dl,
dt,
dd,
ul,
li,
h1,
h2,
h3,
h4,
h5,
h6,
pre,
code,
form,
fieldset,
input,
textarea,
p,
blockquote,
th,
td {
  margin: 0;
  padding: 0;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

fieldset,
img,
abbr {
  border: 0;
}

address,
caption,
cite,
code,
dfn,
em,
strong,
th,
var {
  font-style: normal;
  font-weight: normal;
}

ul li {
  list-style: none;
}

caption,
th {
  text-align: left;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  font-size: 100%;
  font-weight: normal;
}

sup {
  vertical-align: text-top;
}

sub {
  vertical-align: text-bottom;
}

input,
textarea,
select {
  font-family: inherit;
  font-size: inherit;
  font-weight: inherit;
}

legend {
  color: #000;
}

article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section,
main {
  display: block;
}

img {
  max-width: 100%;
}

body {
  font-family: "Segoe Script";
  font-weight: bold;
  width: 100%;
  font-size: 22px;
}

.header {
  max-width: 1000px;
  margin: 0 auto;
  overflow: hidden;
  background-color: #fff;
}

.header .logos {
  display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  margin-left: -5px;
  margin-right: -5px;
  -ms-flex-pack: justify;
  justify-content: space-between;
  margin: 10px 0px;
}

.header .logos .logo_main,
.header .logos .logo_icons {
  -ms-flex-preferred-size: 287px;
  flex-basis: 287px;
  height: 50px;
}

.header .logos .logo_main {
  background: url("../img/logoDitz.png") 50% 50% no-repeat;
  background-size: 100% auto;
  cursor: pointer;
}

.header .logos .logo_icons {
  display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.header .logos .logo_icons li {
  -ms-flex-preferred-size: 50px;
  flex-basis: 50px;
  height: 50px;
  cursor: pointer;
}

.header .logos .logo_icons #vk {
  background: url("../img/ikonkisozseti.png") 0px 0px no-repeat;
  background-size: 340%;
}

.header .logos .logo_icons #ig {
  background: url("../img/ikonkisozseti.png") -60px 0px no-repeat;
  background-size: 340% auto;
}

.header .logos .logo_icons #fb {
  background: url("../img/ikonkisozseti.png") -120px 0px no-repeat;
  background-size: 340% auto;
}

.header .main-menu {
  min-height: 50px;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -ms-flex-pack: justify;
  justify-content: space-between;
  -ms-flex-align: center;
  align-items: center;
  border-top: 1px dashed #000;
  border-bottom: 1px dashed #000;
}

.header .main-menu li {
  cursor: pointer;
}

.content {
  max-width: 1000px;
  margin: 0 auto;
  overflow: hidden;
  background-color: #fff;
}

.content .row {
  margin-top: 20px;
  padding-bottom: 20px;
  border-bottom: 1px dashed #000;
}

.content .row__content {
  display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  margin-left: -5px;
  margin-right: -5px;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.content .row__content .rightPictures {
  box-sizing: border-box;
  margin-left: 5px;
  margin-right: 5px;
  word-wrap: break-word;
  width: calc(33.333333333333336% - 10px);
  display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  margin-left: -5px;
  margin-right: -5px;
  -ms-flex-pack: justify;
  justify-content: space-between;
  -ms-flex-direction: column;
  flex-direction: column;
}

.content .row__content .rightPictures li {
  cursor: pointer;
}

.content .row__content .rightPictures li img {
  display: block;
}

.content .row__caption {
  display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  margin-left: -5px;
  margin-right: -5px;
  -ms-flex-pack: justify;
  justify-content: space-between;
  -ms-flex-align: center;
  align-items: center;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
}

.content .row__caption div {
  box-sizing: border-box;
  margin-left: 5px;
  margin-right: 5px;
  word-wrap: break-word;
  -ms-flex-preferred-size: 300px;
  flex-basis: 300px;
  cursor: pointer;
}

.content .row__image ul {
  display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  margin-left: -5px;
  margin-right: -5px;
  -ms-flex-pack: justify;
  justify-content: space-between;
  -ms-flex-align: center;
  align-items: center;
}

.content .row__image ul li {
  box-sizing: border-box;
  margin-left: 5px;
  margin-right: 5px;
  word-wrap: break-word;
  width: calc(25% - 10px);
  margin-top: 10px;
}

.content .row__image ul li img {
  display: block;
}

.content .row__image-threeImg li:nth-child(2) {
  width: calc(50% - 10px);
}

.content .row__image-album ul {
  -ms-flex-pack: start;
  justify-content: flex-start;
}

.screenImage {
  display: none;
  position: fixed;
  top: 0;
  right: 0;
  width: 100%;
  height: 100%;
  z-index: 100;
  background: url("../img/fancybox_overlay.png");
}

.slider {
  display: block;
  position: relative;
  overflow: hidden;
}

.slider-onLeft {
  box-sizing: border-box;
  margin-left: 5px;
  margin-right: 5px;
  word-wrap: break-word;
  width: calc(66.66666666666667% - 10px);
  position: relative;
  cursor: pointer;
}

.slider-fullScreen {
  width: 600px;
  height: 100%;
  margin: auto;
}

.slider__imgSize {
  display: block;
}

.slider ul li {
  display: block;
  opacity: 0;
  transition: opacity 1s;
}

.slider ul li.animate {
  opacity: 1;
}

.slider ul li img {
  display: block;
  position: absolute;
  margin: auto;
  left: 0;
  top: 0;
  bottom: 0;
  right: 0;
}

.slider__arrowRight,
.slider__arrowLeft {
  display: none;
  width: 50px;
  height: 25px;
  position: absolute;
  z-index: 1;
  top: 50%;
  margin-top: -12px;
  background: url("../img/arrows.png") no-repeat;
  background-size: 300% auto;
  cursor: pointer;
  border-radius: 8px;
}

.slider__arrowRight:hover,
.slider__arrowLeft:hover {
  background-color: #808080;
  opacity: 0.7;
}

.slider__arrowRight {
  right: 0;
  background-position: 0px -13px;
}

.slider__arrowLeft {
  left: 0;
  background-position: -100px -13px;
}

.slider:hover .slider__arrowRight,
.slider:hover .slider__arrowLeft {
  display: block;
}

.slider__closeImage {
  cursor: pointer;
  position: absolute;
  left: 50%;
  margin-left: -17px;
  bottom: 20px;
  width: 34px;
  height: 34px;
  background: url("../img/fancybox_sprite.png") no-repeat;
  z-index: 1;
}

.visible {
  display: block;
}

.footer {
  max-width: 1000px;
  margin: 0 auto;
  overflow: hidden;
  background-color: #fff;
}

.footer .wrap-footer {
  display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  margin-left: -5px;
  margin-right: -5px;
  -ms-flex-pack: justify;
  justify-content: space-between;
  margin: 30px 0;
  font-size: 19px;
}

.footer .wrap-footer .copy {
  font-family: "Arial";
}

.footer .wrap-footer div {
  box-sizing: border-box;
  margin-left: 5px;
  margin-right: 5px;
  word-wrap: break-word;
  -ms-flex-preferred-size: 387px;
  flex-basis: 387px;
  line-height: 1;
}

.footer .wrap-footer div .min-font {
  font-size: 10px;
}

.footer .wrap-footer .contact {
  display: -ms-flexbox;
  display: flex;
}

.footer .wrap-footer .contact .address {
  line-height: 1.5;
}

.footer .wrap-footer .contact .footer-img {
  max-width: 70px;
}

.footer .wrap-footer .contact .footer-img img {
  display: block;
  position: relative;
  right: 0;
}

@media screen and (max-width: 800px) {
  .header .main-menu {
    -ms-flex-pack: distribute;
    justify-content: space-around;
  }

  .header .main-menu li {
    margin: 0 40px;
  }

  .footer .wrap-footer {
    -ms-flex-pack: distribute;
    justify-content: space-around;
  }

  .footer .wrap-footer .contact {
    margin-top: 20px;
  }
}

@media screen and (max-width: 600px) {
  .header .logos {
    -ms-flex-pack: center;
    justify-content: center;
  }

  .header .logos .logo_main {
    margin: 10px;
    -ms-flex-preferred-size: 400px;
    flex-basis: 400px;
    height: 80px;
  }

  .header .main-menu {
    display: none;
  }

  .content .row__content .rightPictures {
    display: none;
  }

  .content .row__image ul li {
    width: calc(50% - 10px);
  }

  .content .row__image-threeImg li:nth-child(2) {
    width: calc(100% - 10px);
  }

  .content .row__image-threeImg li:nth-child(2) {
    -ms-flex-order: -1;
    order: -1;
  }

  .slider-onLeft {
    width: calc(100% - 10px);
  }

  .slider-fullScreen {
    width: 100%;
  }

  .slider__arrowRight,
  .slider__arrowLeft {
    display: block;
  }
}

@media screen and (max-width: 400px) {
  .content .row__caption div:last-child {
    -ms-flex-preferred-size: 250px;
    flex-basis: 250px;
  }

  .footer .wrap-footer .contact .footer-img {
    display: none;
  }
}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
